// <auto-generated />
using System;
using MedicalSystem.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MedicalSystem.Infrastructure.Migrations
{
    [DbContext(typeof(MedicalSystemContext))]
    partial class MedicalSystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MedicalSystem.Core.Models.Examination", b =>
                {
                    b.Property<int>("ExaminationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ExaminationId"));

                    b.Property<DateTime>("ExaminationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("ExaminationTime")
                        .HasColumnType("interval");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("ExaminationId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TypeId");

                    b.ToTable("Examinations");
                });

            modelBuilder.Entity("MedicalSystem.Core.Models.ExaminationType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TypeId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("TypeId");

                    b.ToTable("ExaminationTypes");

                    b.HasData(
                        new
                        {
                            TypeId = 1,
                            Code = "GP",
                            Description = "Kompletan pregled cijelog tijela",
                            Name = "Opći tjelesni pregled"
                        },
                        new
                        {
                            TypeId = 2,
                            Code = "KRV",
                            Description = "Analiza krvne slike",
                            Name = "Test krvi"
                        },
                        new
                        {
                            TypeId = 3,
                            Code = "X-RAY",
                            Description = "Snimanje rendgenskim zrakama",
                            Name = "Rendgensko skeniranje"
                        },
                        new
                        {
                            TypeId = 4,
                            Code = "CT",
                            Description = "Kompjuterizirana tomografija",
                            Name = "CT sken"
                        },
                        new
                        {
                            TypeId = 5,
                            Code = "MR",
                            Description = "Magnetska rezonanca",
                            Name = "MRI sken"
                        },
                        new
                        {
                            TypeId = 6,
                            Code = "ULTRA",
                            Description = "Pregled ultrazvukom",
                            Name = "Ultrazvuk"
                        },
                        new
                        {
                            TypeId = 7,
                            Code = "EKG",
                            Description = "Mjerenje električne aktivnosti srca",
                            Name = "Elektrokardiogram"
                        },
                        new
                        {
                            TypeId = 8,
                            Code = "ECHO",
                            Description = "Ultrazvuk srca",
                            Name = "Ehokardiogram"
                        },
                        new
                        {
                            TypeId = 9,
                            Code = "EYE",
                            Description = "Oftalmološki pregled",
                            Name = "Pregled očiju"
                        },
                        new
                        {
                            TypeId = 10,
                            Code = "DERM",
                            Description = "Pregled kože",
                            Name = "Dermatološki pregled"
                        },
                        new
                        {
                            TypeId = 11,
                            Code = "DENTA",
                            Description = "Stomatološki pregled",
                            Name = "Pregled zuba"
                        },
                        new
                        {
                            TypeId = 12,
                            Code = "MAMMO",
                            Description = "Radiološki pregled dojki",
                            Name = "Mamografija"
                        },
                        new
                        {
                            TypeId = 13,
                            Code = "NEURO",
                            Description = "Pregled neurološkog sustava",
                            Name = "Neurološki pregled"
                        });
                });

            modelBuilder.Entity("MedicalSystem.Core.Models.MedicalHistory", b =>
                {
                    b.Property<int>("MedicalHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MedicalHistoryId"));

                    b.Property<string>("DiseaseName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("MedicalHistoryId");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalHistories");
                });

            modelBuilder.Entity("MedicalSystem.Core.Models.MedicalImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ImageId"));

                    b.Property<int>("ExaminationId")
                        .HasColumnType("integer");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ImageId");

                    b.HasIndex("ExaminationId");

                    b.ToTable("MedicalImages");
                });

            modelBuilder.Entity("MedicalSystem.Core.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientId"));

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OIB")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<string>("PatientNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("PatientId");

                    b.HasIndex("OIB")
                        .IsUnique();

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("MedicalSystem.Core.Models.Prescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PrescriptionId"));

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("PatientId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("MedicalSystem.Core.Models.Examination", b =>
                {
                    b.HasOne("MedicalSystem.Core.Models.Patient", "Patient")
                        .WithMany("Examinations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalSystem.Core.Models.ExaminationType", "ExaminationType")
                        .WithMany("Examinations")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExaminationType");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalSystem.Core.Models.MedicalHistory", b =>
                {
                    b.HasOne("MedicalSystem.Core.Models.Patient", "Patient")
                        .WithMany("MedicalHistories")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalSystem.Core.Models.MedicalImage", b =>
                {
                    b.HasOne("MedicalSystem.Core.Models.Examination", "Examination")
                        .WithMany("MedicalImages")
                        .HasForeignKey("ExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Examination");
                });

            modelBuilder.Entity("MedicalSystem.Core.Models.Prescription", b =>
                {
                    b.HasOne("MedicalSystem.Core.Models.Patient", "Patient")
                        .WithMany("Prescriptions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalSystem.Core.Models.Examination", b =>
                {
                    b.Navigation("MedicalImages");
                });

            modelBuilder.Entity("MedicalSystem.Core.Models.ExaminationType", b =>
                {
                    b.Navigation("Examinations");
                });

            modelBuilder.Entity("MedicalSystem.Core.Models.Patient", b =>
                {
                    b.Navigation("Examinations");

                    b.Navigation("MedicalHistories");

                    b.Navigation("Prescriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
